import SwiftUI

struct ArchiveFeelingView: View {
    @Environment(\.dismiss) private var dismiss
    @State private var selectedCategory: String? = nil
    @State private var dragOffset = CGSize.zero
    @State private var emotionRatios: [String: Double] = [:]
    @State private var isLoading = true
    @State private var selectedYear: Int = Calendar.current.component(.year, from: Date())
    @State private var showYearPicker = false
    @State private var monthlyEmotionData: [Int] = Array(repeating: 0, count: 12)

    // üìå Í∞êÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù
    let categories: [(String, String)] = [
        ("Joy", "Í∏∞ÏÅ®Í≥º ÎßåÏ°±"),
        ("Trust", "Í∞êÌÉÑÍ≥º ÏàòÏö©"),
        ("Fear", "Í≥µÌè¨ÏôÄ Í∏¥Ïû•"),
        ("Surprise", "Í≤ΩÏù¥ÏôÄ ÎÜÄÎûå"),
        ("Sadness", "Ïä¨ÌîîÍ≥º Ïö∞Ïö∏"),
        ("Disgust", "ÌòêÏò§ÏôÄ ÏßÄÎ£®"),
        ("Anger", "Í≤©ÎÖ∏ÏôÄ Î∂àÏæå"),
        ("Anticipation", "Ïó¥ÎßùÍ≥º Ìò∏Í∏∞Ïã¨")
    ]

    // üìå Í∞êÏ†ïÎ≥Ñ ÏõîÎ≥Ñ Î°úÍ∑∏ Í∞úÏàò (ÎßâÎåÄ Í∑∏ÎûòÌîÑ)
    let monthlyLogs: [String: [Int]] = [
        "Joy": [2, 1, 3, 4, 2, 5, 3, 6, 7, 5, 3, 4],
        "Trust": [3, 2, 2, 3, 4, 3, 5, 2, 6, 7, 4, 5],
        "Fear": [1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 2],
        "Surprise": [2, 2, 4, 3, 2, 5, 3, 4, 5, 3, 2, 6],
        "Sadness": [1, 1, 2, 3, 2, 2, 3, 2, 4, 5, 3, 1],
        "Disgust": [1, 2, 1, 2, 3, 1, 2, 1, 3, 2, 1, 2],
        "Anger": [3, 3, 2, 4, 5, 3, 6, 5, 4, 3, 2, 5],
        "Anticipation": [2, 2, 3, 4, 5, 3, 2, 4, 5, 3, 2, 4]
    ]

    var body: some View {
        ZStack {
            VStack(spacing: 16) {
                Heading(title: "Feeling", buttonIcon: nil, menuItems: [])
                
                if isLoading {
                    Spacer()
                    ProgressView()
                        .progressViewStyle(CircularProgressViewStyle(tint: .white))
                    Spacer()
                } else {
                    FeelingChartView(
                        selectedCategory: selectedCategory,
                        categoryLogCounts: convertRatiosToCount(emotionRatios),
                        monthlyData: monthlyEmotionData,
                        selectedYear: selectedYear,
                        onYearChange: { year in
                            selectedYear = year
                            showYearPicker = true
                        }
                    )
                    .sheet(isPresented: $showYearPicker) {
                        YearPickerView(
                            selectedYear: $selectedYear,
                            showPicker: $showYearPicker,
                            onYearSelected: { year in
                                Task {
                                    isLoading = true
                                    await fetchEmotionRatios()
                                    if let category = selectedCategory {
                                        await fetchMonthlyEmotionData(for: category)
                                    }
                                    isLoading = false
                                }
                            }
                        )
                        .presentationDetents([.fraction(0.3)])
                    }
                    
                    FeelingCategoryGrid(
                        categories: categories,
                        selectedCategory: $selectedCategory,
                        onCategorySelected: { category in
                            Task {
                                await fetchMonthlyEmotionData(for: category)
                            }
                        }
                    )
                    Spacer()
                }
            }
            
            VStack {
                Spacer()
                FloatingButtonContainer(buttons: [
                    FloatingButton(icon: "arrow.left", text: nil, action: {
                        dismiss()
                    })
                ])
                .padding(.bottom, 16)
            }
        }
        .commonBackground()
        .task {
            await fetchEmotionRatios()
        }
    }
    
    private func fetchEmotionRatios() async {
        do {
            print("üìä Í∞êÏ†ï ÎπÑÏú® ÏöîÏ≤≠ ÏãúÏûë - ÏÑ†ÌÉùÎêú Ïó∞ÎèÑ: \(selectedYear)")
            let response = try await DiaryService.shared.getFeelingRatio(year: selectedYear)
            
            print("‚úÖ Î∞õÏïÑÏò® Í∞êÏ†ï ÎπÑÏú® Îç∞Ïù¥ÌÑ∞:")
            print("- Í∏∞ÏÅ®: \(response.Í∏∞ÏÅ®)")
            print("- Ïã†Î¢∞: \(response.Ïã†Î¢∞)")
            print("- Í∏¥Ïû•: \(response.Í∏¥Ïû•)")
            print("- ÎÜÄÎûå: \(response.ÎÜÄÎûå)")
            print("- Ïä¨Ìîî: \(response.Ïä¨Ìîî)")
            print("- ÌòêÏò§: \(response.ÌòêÏò§)")
            print("- Í≤©ÎÖ∏: \(response.Í≤©ÎÖ∏)")
            print("- Ïó¥Îßù: \(response.Ïó¥Îßù)")
            
            await MainActor.run {
                emotionRatios = [
                    "Í∏∞ÏÅ®": response.Í∏∞ÏÅ®,
                    "Ïã†Î¢∞": response.Ïã†Î¢∞,
                    "Í∏¥Ïû•": response.Í∏¥Ïû•,
                    "ÎÜÄÎûå": response.ÎÜÄÎûå,
                    "Ïä¨Ìîî": response.Ïä¨Ìîî,
                    "ÌòêÏò§": response.ÌòêÏò§,
                    "Í≤©ÎÖ∏": response.Í≤©ÎÖ∏,
                    "Ïó¥Îßù": response.Ïó¥Îßù
                ]
                isLoading = false
            }
        } catch {
            print("‚ùå Í∞êÏ†ï ÎπÑÏú® Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:")
            print("- ÏóêÎü¨ ÎÇ¥Ïö©:", error)
            await MainActor.run {
                emotionRatios = [:]  // ÏóêÎü¨ Ïãú Îπà Îç∞Ïù¥ÌÑ∞Î°ú ÏÑ§Ï†ï
                isLoading = false
            }
        }
    }
    
    private func convertRatiosToCount(_ ratios: [String: Double]) -> [String: Int] {
        var counts: [String: Int] = [:]
        let emotionMapping = [
            "Í∏∞ÏÅ®": "Joy",
            "Ïã†Î¢∞": "Trust",
            "Í∏¥Ïû•": "Fear",
            "ÎÜÄÎûå": "Surprise",
            "Ïä¨Ìîî": "Sadness",
            "ÌòêÏò§": "Disgust",
            "Í≤©ÎÖ∏": "Anger",
            "Ïó¥Îßù": "Anticipation"
        ]
        
        for (koreanEmotion, ratio) in ratios {
            if let englishEmotion = emotionMapping[koreanEmotion] {
                counts[englishEmotion] = Int(ratio)
            }
        }
        return counts
    }
    
    private func fetchMonthlyEmotionData(for category: String) async {
        do {
            let emotionMapping = [
                "Joy": "Í∏∞ÏÅ®",
                "Trust": "Ïã†Î¢∞",
                "Fear": "Í∏¥Ïû•",
                "Surprise": "ÎÜÄÎûå",
                "Sadness": "Ïä¨Ìîî",
                "Disgust": "ÌòêÏò§",
                "Anger": "Í≤©ÎÖ∏",
                "Anticipation": "Ïó¥Îßù"
            ]
            
            guard let koreanEmotion = emotionMapping[category] else { 
                print("‚ùå Í∞êÏ†ï Îß§Ìïë Ïã§Ìå®:", category)
                return 
            }
            
            print("üìä ÏõîÎ≥Ñ Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠ ÏãúÏûë")
            print("- ÏòÅÎ¨∏ Ïπ¥ÌÖåÍ≥†Î¶¨:", category)
            print("- ÌïúÍ∏Ä Í∞êÏ†ï:", koreanEmotion)
            
            let response = try await DiaryService.shared.getMonthlyEmotionCount(
                emotion: koreanEmotion,
                year: selectedYear
            )
            
            await MainActor.run {
                monthlyEmotionData = [
                    response.JAN,
                    response.FEB,
                    response.MAR,
                    response.APR,
                    response.MAY,
                    response.JUN,
                    response.JUL,
                    response.AUG,
                    response.SEP,
                    response.OCT,
                    response.NOV,
                    response.DEC
                ]
            }
        } catch {
            print("‚ùå ÏõîÎ≥Ñ Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:")
            print("- ÏóêÎü¨ ÎÇ¥Ïö©:", error)
            await MainActor.run {
                monthlyEmotionData = Array(repeating: 0, count: 12)
            }
        }
    }
}

// ‚úÖ Ï∞®Ìä∏Îßå Îã¥ÎãπÌïòÎäî ÏÑúÎ∏åÎ∑∞ (PieChart & BarChart ÏÑ†ÌÉù)
struct FeelingChartView: View {
    let selectedCategory: String?
    let categoryLogCounts: [String: Int]
    let monthlyData: [Int]
    let selectedYear: Int
    let onYearChange: (Int) -> Void

    var body: some View {
        VStack(alignment: .leading, spacing: 48) {
            HStack {
                Text(selectedCategory ?? "State of Mind")
                    .font(.system(size: 13, weight: .medium, design: .default))
                    .foregroundColor(Color(hex: "D2D2D2"))
                    .padding(.leading, 16)
                    .padding(.top, 12)
                Spacer()
                
                Button(action: {
                    onYearChange(selectedYear)
                }) {
                    Text(String(selectedYear))
                        .font(.system(size: 13, weight: .medium, design: .default))
                        .foregroundColor(Color(hex: "007AFF"))
                }
                .padding(.trailing, 16)
                .padding(.top, 12)
            }

            if categoryLogCounts.values.allSatisfy({ $0 == 0 }) {
                Text("Ìï¥Îãπ Ïó∞ÎèÑÏùò Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§")
                    .foregroundColor(.gray)
                    .frame(maxWidth: .infinity)
                    .frame(height: 280)
            } else if let selectedCategory = selectedCategory {
                BarChartView(category: selectedCategory, data: monthlyData)
                    .frame(height: 240)
                    .padding(.bottom, 12)
            } else {
                PieChart(data: categoryLogCounts)
                    .frame(height: 240)
                    .padding(.bottom, 12)
            }
        }
        .frame(maxWidth: .infinity)
        .frame(height: 360)
        .background(
            Color.black.opacity(0.75)
                .cornerRadius(12)
        )
        .padding(.horizontal, 16)
    }
}

// ‚úÖ Í∞êÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäº (2x4 Í∑∏Î¶¨Îìú)
struct FeelingCategoryGrid: View {
    let categories: [(String, String)]
    @Binding var selectedCategory: String?
    let onCategorySelected: (String) -> Void
    
    // Í∞êÏ†ïÎ≥Ñ ÏÉâÏÉÅ Îß§Ìïë
    let emotionColors: [String: String] = [
        "Joy": "#FFD700",         // Í≥®Îìú
        "Trust": "#4A90E2",       // Î∏îÎ£®
        "Fear": "#4A4A4A",        // Îã§ÌÅ¨ Í∑∏Î†àÏù¥
        "Surprise": "#FF9F1C",    // Ïò§Î†åÏßÄ
        "Sadness": "#5C85D6",     // Î∏îÎ£®
        "Disgust": "#6B8E23",     // Ïò¨Î¶¨Î∏å Í∑∏Î¶∞
        "Anger": "#E63946",       // Î†àÎìú
        "Anticipation": "#9B59B6" // ÌçºÌîå
    ]

    var body: some View {
        LazyVGrid(columns: [GridItem(.flexible()), GridItem(.flexible())], spacing: 8) {
            ForEach(categories, id: \.0) { category in
                ExpandableCategoryButton(
                    category: category,
                    onCategorySelected: { _ in
                        selectedCategory = category.0
                        onCategorySelected(category.0)
                    },
                    isSelected: selectedCategory == category.0,
                    backgroundColor: Color(hex: emotionColors[category.0] ?? "#333333").opacity(0.6),
                    onBackPressed: {
                        selectedCategory = nil  // ÏÑ†ÌÉù Ìï¥Ï†ú
                    }
                )
            }
        }
        .padding(.horizontal, 16)
        .padding(.bottom, 40)
    }
}

// MARK: - Preview
struct ArchiveFeelingView_Previews: PreviewProvider {
    static var previews: some View {
        ArchiveFeelingView()
            .preferredColorScheme(.dark)
    }
}

// Preview ÌôòÍ≤Ω Ï≤¥ÌÅ¨Î•º ÏúÑÌïú extension
extension ProcessInfo {
    var isPreviewing: Bool {
        environment["XCODE_RUNNING_FOR_PREVIEWS"] == "1"
    }
}
